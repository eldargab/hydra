exports[`FTSQueryRenderer : Should generate migration 1`] = "import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class Test1Migration111111111 implements MigrationInterface {\n    name = \'test1Migration111111111\'\n\n    public async up(queryRunner: QueryRunner): Promise<void> {\n        // TODO: escape \n        await queryRunner.query(`\n            ALTER TABLE post \n            ADD COLUMN test1_tsv tsvector \n            GENERATED ALWAYS AS (  \n                    setweight(to_tsvector(\'english\', coalesce(\"initial_body_text\", \'\')), \'A\')  || \n                    setweight(to_tsvector(\'english\', coalesce(\"title\", \'\')), \'A\') \n                ) \n            STORED;\n        `);\n        await queryRunner.query(`\n            ALTER TABLE post \n            ADD COLUMN test1_doc text \n            GENERATED ALWAYS AS (  \n                    coalesce(\"initial_body_text\", \'\')  || \n                    coalesce(\"title\", \'\') \n                ) \n            STORED;\n        `);\n        await queryRunner.query(`CREATE INDEX test1_post_idx ON post USING GIN (test1_tsv)`);\n        await queryRunner.query(`CREATE INDEX post_id_idx ON post ((\'post\' || \'_\' || id))`);\n        await queryRunner.query(`\n            ALTER TABLE thread \n            ADD COLUMN test1_tsv tsvector \n            GENERATED ALWAYS AS (  \n                    setweight(to_tsvector(\'english\', coalesce(\"initial_body_text\", \'\')), \'A\')  || \n                    setweight(to_tsvector(\'english\', coalesce(\"title\", \'\')), \'A\') \n                ) \n            STORED;\n        `);\n        await queryRunner.query(`\n            ALTER TABLE thread \n            ADD COLUMN test1_doc text \n            GENERATED ALWAYS AS (  \n                    coalesce(\"initial_body_text\", \'\')  || \n                    coalesce(\"title\", \'\') \n                ) \n            STORED;\n        `);\n        await queryRunner.query(`CREATE INDEX test1_thread_idx ON thread USING GIN (test1_tsv)`);\n        await queryRunner.query(`CREATE INDEX thread_id_idx ON thread ((\'thread\' || \'_\' || id))`);\n\n        await queryRunner.query(`\n            CREATE VIEW test1_view AS\n            SELECT \n                text \'post\' AS origin_table, \'post\' || \'_\' || id AS unique_id, id, test1_tsv AS tsv, test1_doc AS document \n            FROM\n                post\n            UNION ALL\n            SELECT \n                text \'thread\' AS origin_table, \'thread\' || \'_\' || id AS unique_id, id, test1_tsv AS tsv, test1_doc AS document \n            FROM\n                thread\n        `);\n\n    }\n\n    public async down(queryRunner: QueryRunner): Promise<void> {\n        await queryRunner.query(`DROP VIEW test1_view`);\n        await queryRunner.query(`DROP INDEX test1_post_idx`);\n        await queryRunner.query(`DROP INDEX post_id_idx`);\n        await queryRunner.query(`ALTER TABLE post DROP COLUMN test1_tsv`);\n        await queryRunner.query(`ALTER TABLE post DROP COLUMN test1_doc`);\n        await queryRunner.query(`DROP INDEX test1_thread_idx`);\n        await queryRunner.query(`DROP INDEX thread_id_idx`);\n        await queryRunner.query(`ALTER TABLE thread DROP COLUMN test1_tsv`);\n        await queryRunner.query(`ALTER TABLE thread DROP COLUMN test1_doc`);\n    }\n\n\n}\n";
